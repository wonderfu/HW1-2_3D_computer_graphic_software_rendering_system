int TreeText[32][32][3];


void drawtree(void){
	int i, j, bound, lower, upper;

	/*initialize*/
	for (i = 0; i < 32; i++){
		for (j = 0; j < 32; j++){
			TreeText[i][j][0] = 0;
			TreeText[i][j][1] = 0;
			TreeText[i][j][2] = 0;
		}
	}

	/*leaf*/
	TreeText[3][15][1] = 255;
	TreeText[3][16][1] = 255;

	for (i = 4; i < 27; i++){
		bound = i / 2 - i % 2;
		upper = 16 + bound;
		lower = 15 - bound;
		for (j = 0; j<32; j++){
			if (j>lower && j < upper)
				TreeText[i][j][1] = 255;
		}
	}

	/*trunk*/
	for (i = 27; i < 32; i++){
		for (j = 13; j < 19; j++){
			TreeText[i][j][0] = 128;
			TreeText[i][j][1] = 64;
		}
	}

	/*gifts*/
	for (i = 29; i < 32; i++){
		for (j = 4; j < 9; j++){
			TreeText[i][j][0] = 255;
			if (i == 30 || j == 6)
				TreeText[i][j][1] = 255;
		}


		for (j = 23; j < 28; j++){
			TreeText[i][j][0] = 255;
			if (i == 30 || j == 25)
				TreeText[i][j][1] = 255;
		}
	}
	/*star*/
	for (j = 13; j < 19; j++){
		TreeText[1][j][0] = 255;
		TreeText[1][j][1] = 255;
	}
	for (j = 14; j < 18; j++){
		TreeText[2][j][0] = 255;
		TreeText[2][j][1] = 255;
	}

	TreeText[0][15][0] = 255;
	TreeText[0][15][1] = 255;
	TreeText[0][16][0] = 255;
	TreeText[0][16][1] = 255;
	TreeText[3][13][0] = 255;
	TreeText[3][13][1] = 255;
	TreeText[3][18][0] = 255;
	TreeText[3][18][1] = 255;

	return;
}